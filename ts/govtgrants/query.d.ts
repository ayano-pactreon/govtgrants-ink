// Generated by dedot cli

import type { GenericSubstrateApi } from "dedot/types";
import type { AccountId32, Result, AccountId32Like } from "dedot/codecs";
import type {
  GenericContractQuery,
  GenericContractQueryCall,
  ContractCallOptions,
  GenericContractCallResult,
  ContractCallResult,
} from "dedot/contracts";
import type { InkPrimitivesLangError, GovtgrantsError } from "./types";

export interface ContractQuery<ChainApi extends GenericSubstrateApi>
  extends GenericContractQuery<ChainApi> {
  /**
   * Returns the owner of the Contract
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0xfeaea4fa
   **/
  owner: GenericContractQueryCall<
    ChainApi,
    (
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<AccountId32, ContractCallResult<ChainApi>>
    >
  >;

  /**
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0xa3bf0bd5
   **/
  getGrantAmount: GenericContractQueryCall<
    ChainApi,
    (
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<bigint, ContractCallResult<ChainApi>>
    >
  >;

  /**
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0xe9316a11
   **/
  canSubmitProposal: GenericContractQueryCall<
    ChainApi,
    (
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<boolean, ContractCallResult<ChainApi>>
    >
  >;

  /**
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0xfe209b94
   **/
  submitGrantAmount: GenericContractQueryCall<
    ChainApi,
    (
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<bigint, GovtgrantsError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Returns the list of bidders
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0x424642d3
   **/
  getBidders: GenericContractQueryCall<
    ChainApi,
    (
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Array<AccountId32>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Retrieve the balance of the account.
   *
   * @param {AccountId32Like} caller
   * @param {ContractCallOptions} options
   *
   * @selector 0xa963a847
   **/
  getProposalForBidder: GenericContractQueryCall<
    ChainApi,
    (
      caller: AccountId32Like,
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        string | undefined,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {string} url
   * @param {ContractCallOptions} options
   *
   * @selector 0xc4d32d79
   **/
  submitProposal: GenericContractQueryCall<
    ChainApi,
    (
      url: string,
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], GovtgrantsError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {AccountId32Like} winnerId
   * @param {ContractCallOptions} options
   *
   * @selector 0x52fd3e2d
   **/
  pickBidder: GenericContractQueryCall<
    ChainApi,
    (
      winnerId: AccountId32Like,
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], GovtgrantsError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0x6dbac0f5
   **/
  startBiddingForGrant: GenericContractQueryCall<
    ChainApi,
    (
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], GovtgrantsError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0x51798d6e
   **/
  stopBiddingForGrant: GenericContractQueryCall<
    ChainApi,
    (
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], GovtgrantsError>,
        ContractCallResult<ChainApi>
      >
    >
  >;
}
